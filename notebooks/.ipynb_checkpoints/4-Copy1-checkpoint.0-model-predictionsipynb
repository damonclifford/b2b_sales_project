{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "<script>\n",
    "  function code_toggle() {\n",
    "    if (code_shown){\n",
    "      $('div.input').hide('500');\n",
    "      $('#toggleButton').val('Show Code')\n",
    "    } else {\n",
    "      $('div.input').show('500');\n",
    "      $('#toggleButton').val('Hide Code')\n",
    "    }\n",
    "    code_shown = !code_shown\n",
    "  }\n",
    "\n",
    "  $( document ).ready(function(){\n",
    "    code_shown=false;\n",
    "    $('div.input').hide()\n",
    "  });\n",
    "</script>\n",
    "<form action=\"javascript:code_toggle()\"><input type=\"submit\" id=\"toggleButton\" value=\"Show Code\"></form>"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "<script>\n",
    "  $(document).ready(function(){\n",
    "    $('div.prompt').hide();\n",
    "    $('div.back-to-top').hide();\n",
    "    $('nav#menubar').hide();\n",
    "    $('.breadcrumb').hide();\n",
    "    $('.hidden-print').hide();\n",
    "  });\n",
    "</script>\n",
    "\n",
    "<footer id=\"attribution\" style=\"float:right; color:#999; background:#fff;\">\n",
    "Created with Jupyter Lab, by Nicholas Richers.\n",
    "</footer>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the best model from the experiments to estimate generalization performance on the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "from utils import code\n",
    "from plot_libraries import setup_graphics\n",
    "from datasets import get_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Main Libraries\n",
    "import os, random, re, sys, warnings\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from joblib import load\n",
    "\n",
    "#utils\n",
    "from plot_libraries import setup_graphics, dist_plot\n",
    "\n",
    "#corr matrix\n",
    "from scipy.stats import spearmanr\n",
    "from scipy.cluster import hierarchy\n",
    "from sklearn.inspection import permutation_importance\n",
    "\n",
    "#Data transform (pipeline)\n",
    "from sklearn.preprocessing import OneHotEncoder, FunctionTransformer, LabelEncoder, OrdinalEncoder\n",
    "from sklearn.preprocessing import MinMaxScaler,RobustScaler\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline, FeatureUnion\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.model_selection import train_test_split, cross_val_predict\n",
    "from sklearn.calibration import CalibratedClassifierCV\n",
    "\n",
    "\n",
    "\n",
    "# Model evaluation\n",
    "import scikitplot as skplt\n",
    "from sklearn.metrics import make_scorer, roc_auc_score, brier_score_loss, classification_report, confusion_matrix\n",
    "from sklearn.model_selection import train_test_split, cross_val_predict\n",
    "from evaluation import plot_learning_curve, evaluate_model, plot_confusion_matrix, evaluate_model_skopt \n",
    "from evaluation import plot_feature_permutation, plot_calibration_curve, get_cv_scores\n",
    "from skopt import BayesSearchCV\n",
    "from skopt.space import Real, Categorical, Integer\n",
    "\n",
    "# Support\n",
    "import parameters as params\n",
    "from model import Model, build_tuned_model\n",
    "from datasets import get_data\n",
    "from experiments import experiment_11, experiment_2, get_scorer\n",
    "from sklearn.metrics import make_scorer, roc_auc_score, brier_score_loss, classification_report, confusion_matrix\n",
    "\n",
    "#setup\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "pd.options.display.max_columns = None\n",
    "sns.set()\n",
    "%matplotlib inline\n",
    "setup_graphics()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Get Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the training and test sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_future, y_future = get_data('../data/PredDF.csv')\n",
    "X, y = get_data('../data/trainDF.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#model = Model.load('../models_pkl/experiment-2.0-model.pkl')\n",
    "#model.model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "load pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instances: 1,849, Features: 12\n"
     ]
    }
   ],
   "source": [
    "pipeline2 = experiment_2.get_full_pipeline()\n",
    "ps = pipeline2.fit_transform(X).shape\n",
    "print('Instances: {:,}, Features: {}'.format(ps[0], ps[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "scorer = make_scorer(roc_auc_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = get_data('../data/trainDF.csv')\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, stratify=y, random_state=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==> Starting 5-fold cross validation for sklgbm model, 1849 examples\n",
      "==> Elapsed seconds: 607.352\n",
      "Best sklgbm model: LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.6,\n",
      "               importance_type='split', is_unbalance=False, learning_rate=1.0,\n",
      "               max_depth=-1, min_child_samples=500, min_child_weight=0.001,\n",
      "               min_split_gain=0.0, n_estimators=100, n_jobs=-1, num_leaves=2,\n",
      "               objective=None, random_state=None, reg_alpha=0.001,\n",
      "               reg_lambda=0.07735355360315972, silent=True, subsample=1.0,\n",
      "               subsample_for_bin=20000, subsample_freq=0)\n",
      "Best sklgbm score (val): 0.529\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.99      0.92      1534\n",
      "           1       0.82      0.15      0.25       315\n",
      "\n",
      "    accuracy                           0.85      1849\n",
      "   macro avg       0.84      0.57      0.58      1849\n",
      "weighted avg       0.85      0.85      0.80      1849\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.99      0.92      1534\n",
      "           1       0.80      0.14      0.24       315\n",
      "\n",
      "    accuracy                           0.85      1849\n",
      "   macro avg       0.83      0.57      0.58      1849\n",
      "weighted avg       0.84      0.85      0.80      1849\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import bayes_grid_models as bgrid\n",
    "from lightgbm import LGBMClassifier\n",
    "\n",
    "#setup\n",
    "#results, res_cv, res_calibrated, n_iter = list(), dict(), dict(), 100\n",
    "#result = evaluate_model_skopt(X, y, 'sklgbm', LGBMClassifier(), bgrid.lgbm_param_grid, scorer, n_iter=n_iter, cv_folds=5, pipeline=pipeline2)\n",
    "\n",
    "results.append(result)\n",
    "res_cv[result[1]] = get_cv_scores(result[0])\n",
    "#res_calibrated[result[1]] = plot_calibration_curve(result[0], X_train, X_test, y_train, y_test, plot_=False)\n",
    "\n",
    "\n",
    "model = list(filter(lambda x: x[1] == 'sklgbm', results))[0][0]\n",
    "preds = model.model.predict(model.pipeline.transform(X))\n",
    "probs = model.model.predict_proba(model.pipeline.transform(X))\n",
    "plot_confusion_matrix(y, preds)\n",
    "\n",
    "#cal\n",
    "preds, probs = model.predict_calibrated(X, X, y)\n",
    "plot_confusion_matrix(y, preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==> Starting 5-fold cross validation for lgbm model, 1849 examples\n",
      "Fitting 5 folds for each of 100 candidates, totalling 500 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  10 tasks      | elapsed:    1.7s\n",
      "[Parallel(n_jobs=-1)]: Done  64 tasks      | elapsed:    8.3s\n",
      "[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:   22.8s\n",
      "[Parallel(n_jobs=-1)]: Done 280 tasks      | elapsed:   46.8s\n",
      "[Parallel(n_jobs=-1)]: Done 442 tasks      | elapsed:  1.2min\n",
      "[Parallel(n_jobs=-1)]: Done 500 out of 500 | elapsed:  1.4min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==> Elapsed seconds: 81.333\n",
      "Best lgbm model: LGBMClassifier(boosting_type='gbdt', class_weight={0: 1, 1: 10},\n",
      "               colsample_bytree=0.8666666666666667, importance_type='split',\n",
      "               is_unbalance=False, learning_rate=0.008340502686000294,\n",
      "               max_depth=-1, min_child_samples=305, min_child_weight=0.001,\n",
      "               min_split_gain=0.0, n_estimators=100, n_jobs=-1, num_leaves=38,\n",
      "               objective=None, random_state=None, reg_alpha=0.3877551020408163,\n",
      "               reg_lambda=1.0, silent=True, subsample=0.994949494949495,\n",
      "               subsample_for_bin=160000, subsample_freq=0)\n",
      "Best lgbm score (val): 0.528\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.07      0.14      1534\n",
      "           1       0.18      0.98      0.30       315\n",
      "\n",
      "    accuracy                           0.23      1849\n",
      "   macro avg       0.57      0.53      0.22      1849\n",
      "weighted avg       0.82      0.23      0.17      1849\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      1.00      0.91      1534\n",
      "           1       0.00      0.00      0.00       315\n",
      "\n",
      "    accuracy                           0.83      1849\n",
      "   macro avg       0.41      0.50      0.45      1849\n",
      "weighted avg       0.69      0.83      0.75      1849\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import param_grid_models as rgrid\n",
    "from lightgbm import LGBMClassifier\n",
    "\n",
    "\n",
    "result = evaluate_model(X, y, 'lgbm',\n",
    "                        LGBMClassifier(),\n",
    "                        rgrid.lgbm_param_grid, \n",
    "                        scorer, n_iter=n_iter, \n",
    "                        cv_folds=5, pipeline=pipeline2)\n",
    "\n",
    "results.append(result)\n",
    "res_cv[result[1]] = get_cv_scores(result[0])\n",
    "#res_calibrated[result[1]] = plot_calibration_curve(result[0], X_train, X_test, y_train, y_test, plot_=False)\n",
    "\n",
    "\n",
    "\n",
    "model = list(filter(lambda x: x[1] == 'lgbm', results))[0][0]\n",
    "preds = model.model.predict(model.pipeline.transform(X))\n",
    "probs = model.model.predict_proba(model.pipeline.transform(X))\n",
    "plot_confusion_matrix(y, preds)\n",
    "\n",
    "#cal\n",
    "preds, probs = model.predict_calibrated(X, X, y)\n",
    "plot_confusion_matrix(y, preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Model.load('../models_pkl/experiment-2.0-model.pkl')\n",
    "model.model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "preds = model.model.predict(model.pipeline.transform(X))\n",
    "probs = model.model.predict_proba(model.pipeline.transform(X))\n",
    "\n",
    "preds, probs = model.predict_calibrated(X, X, y)\n",
    "\n",
    "\n",
    "\n",
    "plot_confusion_matrix(y, preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "52"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.hist(probs[:,1], bins=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(12805, 2)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "probs.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.52527047, 0.08980281, 0.19555556, ..., 0.04366989, 0.15651067,\n",
       "       0.04602881])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "probs[:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of training instances: 32,950\n",
      "Number of test instances: 8,238\n"
     ]
    }
   ],
   "source": [
    "print('Number of training instances: {:,}'.format(len(X_train)))\n",
    "print('Number of test instances: {:,}'.format(len(X_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Build the model using the training set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_classification_report(y_test, y_pred):\n",
    "    '''Source: https://stackoverflow.com/questions/39662398/scikit-learn-output-metrics-classification-report-into-csv-tab-delimited-format'''\n",
    "    from sklearn import metrics\n",
    "    report = metrics.classification_report(y_test, y_pred, output_dict=True)\n",
    "    df_classification_report = pd.DataFrame(report).transpose()\n",
    "    df_classification_report = df_classification_report.sort_values(by=['f1-score'], ascending=False)\n",
    "    return df_classification_report"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of targeted customers: 543\n"
     ]
    }
   ],
   "source": [
    "n_targeted = int(len(X_test) * P_TARGETED)\n",
    "print('Number of targeted customers:', n_targeted)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Predict and score the test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6560871090617483"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scorer = get_scorer()\n",
    "model.score(X_test, y_test, scorer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We're off by about 1.2% from our cross validation results which is well within two standard deviations of the results."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Financial Performance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Evaluate financial performance on baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Baseline profit: $227,418\n",
      "Baseline conversion rate: 0.39\n",
      "Lift over random model: 3.5\n"
     ]
    }
   ],
   "source": [
    "baseline_preds = baseline_model_predictions(X_test, y_test, n_targeted)\n",
    "baseline_outcomes = baseline_preds.apply(lambda x: AVG_COST if x == 0 else AVG_COST + AVG_REVENUE)\n",
    "baseline_profit = sum(baseline_outcomes)\n",
    "baseline_rate = baseline_preds.sum() / len(baseline_preds)\n",
    "base_rate = y_test.sum() / len(y_test)\n",
    "\n",
    "print('Baseline profit: ${:,}'.format(baseline_profit))\n",
    "print('Baseline conversion rate: {:.2f}'.format(baseline_rate))\n",
    "print('Lift over random model: {:.1f}'.format(baseline_rate / base_rate))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_trans = model.pipeline.transform(X_test)\n",
    "preds = model.model.predict(X_test_trans)\n",
    "probs = model.model.predict_proba(X_test_trans)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model profit: $296,730\n",
      "Model lift: 1.3 or $69,312\n",
      "Targeted conversion rate: 0.51\n",
      "Conversion rate lift: 4.54\n"
     ]
    }
   ],
   "source": [
    "# Create a dataframe of probabilities and actual / predicted outcomes\n",
    "probs_df = pd.DataFrame(np.hstack([probs, y_test.values.reshape(-1,1), preds.reshape(-1,1)]), columns=['p_no', 'p_yes', 'actual', 'predicted'])\n",
    "\n",
    "# Sort customers by the probability that they will convert\n",
    "model_targets = probs_df.sort_values('p_yes', ascending=False)\n",
    "\n",
    "# Take the top N\n",
    "model_targets = model_targets.head(n_targeted)\n",
    "\n",
    "# Calculate financial outcomes\n",
    "model_outcomes = model_targets.actual.apply(lambda x: AVG_COST if x == 0 else AVG_COST + AVG_REVENUE)\n",
    "model_profit = sum(model_outcomes)\n",
    "model_conv_rate = model_targets.actual.sum() / len(model_targets)\n",
    "\n",
    "print('Model profit: ${:,}'.format(model_profit))\n",
    "print('Model lift: {:.1f} or ${:,}'.format(model_profit / baseline_profit, model_profit - baseline_profit))\n",
    "print('Targeted conversion rate: {:.2f}'.format(model_conv_rate))\n",
    "print('Conversion rate lift: {:.2f}'.format(model_conv_rate / base_rate))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our model produces the expected lift (see 2.0-experiment-1-baseline)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.00      0.00      0.00       265\n",
      "         1.0       0.51      1.00      0.68       278\n",
      "\n",
      "   micro avg       0.51      0.51      0.51       543\n",
      "   macro avg       0.26      0.50      0.34       543\n",
      "weighted avg       0.26      0.51      0.35       543\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/envs/py35-ds/lib/python3.5/site-packages/sklearn/metrics/classification.py:1143: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(model_targets.actual, model_targets.predicted))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost of false positives: $2,224\n"
     ]
    }
   ],
   "source": [
    "print('Cost of false positives: ${:,}'.format(278*8))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given the neglible cost of false negatives, we can afford to miss all of the true negatives in the targeted sample - customers who did not end up converting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/envs/py35-ds/lib/python3.5/site-packages/matplotlib/cbook/deprecation.py:107: MatplotlibDeprecationWarning: Passing one of 'on', 'true', 'off', 'false' as a boolean is deprecated; use an actual boolean (True/False) instead.\n",
      "  warnings.warn(message, mplDeprecation, stacklevel=1)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "skplt.metrics.plot_cumulative_gain(y_test, probs);\n",
    "plt.axvline(.066, color='red');"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "<script>\n",
    "  jQuery(document).ready(function($) {\n",
    "\n",
    "  $(window).load(function(){\n",
    "    $('#preloader').fadeOut('slow',function(){$(this).remove();});\n",
    "  });\n",
    "\n",
    "  });\n",
    "</script>\n",
    "\n",
    "<style type=\"text/css\">\n",
    "  div#preloader { position: fixed;\n",
    "      left: 0;\n",
    "      top: 0;\n",
    "      z-index: 999;\n",
    "      width: 100%;\n",
    "      height: 100%;\n",
    "      overflow: visible;\n",
    "      background: #fff url('http://preloaders.net/preloaders/720/Moving%20line.gif') no-repeat center center;\n",
    "  }\n",
    "\n",
    "</style>\n",
    "\n",
    "<div id=\"preloader\"></div>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
